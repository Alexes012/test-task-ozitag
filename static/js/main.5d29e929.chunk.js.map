{"version":3,"sources":["components/header/Header.module.css","components/header/Link.module.css","components/01_Profile/Profile.module.css","helpComponents/button/Button.module.css","api/api.ts","bll/LoginReducer.ts","helpComponents/button/Button.tsx","components/01_Profile/Profile.tsx","helpComponents/input/Input.tsx","components/02_Login/Login.tsx","components/header/Link.tsx","components/header/Header.tsx","main/routes/Routes.tsx","bll/store.ts","main/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","headers","Authorization","authAPI","get","Cookies","then","response","data","email","password","clientId","post","initialState","isAuth","setAuthUserData","type","payload","login","dispatch","set","accessToken","loginReducer","state","action","Button","props","className","styles","button","onClick","onChange","value","disabled","description","Profile","useDispatch","useSelector","store","to","profile","remove","Input","placeholder","input","onBlur","checked","Login","useState","setEmail","setPass","event","target","Link","containerForLink","animation","link","linkDecor","name","Header","main","container","nameOfPages","wrapper","containerForOther","pages","id","title","path","component","Routes","map","p","key","exact","render","reducers","combineReducers","LoginReducer","createStore","applyMiddleware","thunkMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d29e929.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Header_main__2WiZB\",\"container\":\"Header_container__KlSLN\",\"nameOfPages\":\"Header_nameOfPages__3mlnP\",\"wrapper\":\"Header_wrapper__3MYlg\",\"containerForOther\":\"Header_containerForOther__27gJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Link_link__AGXXo\",\"linkDecor\":\"Link_linkDecor__uOGTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1F1eX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3qS8_\"};","import axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://tager.dev.ozitag.com/api/',\r\n    headers: {\r\n        Authorization: ``\r\n    }\r\n});\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`user/profile`, {headers: {Authorization: `Bearer ${Cookies.get('token')}`}})\r\n            .then((response) => response.data)\r\n    },\r\n    login(email: string, password: string, clientId: number = 1) {\r\n        return instance.post(`auth/user`, {clientId, email, password})\r\n            .then((response) => response.data)\r\n    },\r\n    loginOut() {\r\n        return instance.post(`user/profile/logout`, {}, {headers: {Authorization: `Bearer ${Cookies.get('token')}`}})\r\n            .then((response) => response.data)\r\n    }\r\n};","import {authAPI} from \"../api/api\";\r\nimport Cookies from 'js-cookie';\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    clientId: null,\r\n    email: null,\r\n    password: null,\r\n    isAuth: false\r\n};\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                ...action.isAuth\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport const setAuthUserData = (clientId: number | null, email: string | null, password: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, payload: {clientId, email, password, isAuth}});\r\n\r\nexport const getAuthUserData = () => (dispatch: any) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            let {clientId, email, password} = response.data;\r\n            dispatch(setAuthUserData(clientId, email, password, true));\r\n        });\r\n};\r\n\r\nexport const login = (email: string, password: string) => (dispatch: any) => {\r\n    authAPI.login(email, password)\r\n        .then(response => {\r\n            Cookies.set('token', response.data.accessToken);\r\n            dispatch(getAuthUserData());\r\n        });\r\n};\r\n\r\nexport const logOut = () => (dispatch: any) => {\r\n    authAPI.loginOut()\r\n        .then(response => {\r\n            Cookies.remove('token')\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        });\r\n};\r\n\r\nexport default loginReducer;","import React from 'react';\r\nimport styles from './Button.module.css'\r\n\r\nfunction Button(props: any) {\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className={styles.button}\r\n                onClick={props.onClick}\r\n                onChange={props.onChange}\r\n                value={props.value}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.description}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {FC} from 'react'\r\nimport styles from './Profile.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {storeType} from \"../../bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {logOut} from \"../../bll/LoginReducer\";\r\nimport Button from \"../../helpComponents/button/Button\";\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onSumbitHandler4 = () => {\r\n        dispatch(logOut())\r\n    };\r\n\r\n    const {isAuth} = useSelector((store: storeType) => store.login);\r\n\r\n        if (isAuth === false) {\r\n            return <Redirect to={'/'}/>\r\n        }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n             <h1>It's your profile</h1>\r\n            <h2>If you want to leave your page, click the button below</h2>\r\n            <Button description=\"LogOut\" onClick={onSumbitHandler4}/>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nfunction Input(props: any) {\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={props.type ? props.type : \"text\"}\r\n                placeholder={props.placeholder} className={styles.input}\r\n                onClick={props.onClick}\r\n                onChange={props.onChange}\r\n                value={props.value}\r\n                onBlur={props.onBlur}\r\n                checked={props.checked}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, {ChangeEvent, useState} from 'react';\r\nimport './Login.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { login } from '../../bll/LoginReducer';\r\nimport Input from \"../../helpComponents/input/Input\";\r\nimport Button from \"../../helpComponents/button/Button\";\r\nimport {storeType} from \"../../bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Login:React.FC = (props: any) => {\r\n    const [email, setEmail] = useState<string>('user@ozitag.com');\r\n    const [password, setPass] = useState<string>('user');\r\n    const dispatch = useDispatch();\r\n\r\n    const onEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(event.target.value)\r\n    };\r\n    const onPassChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPass(event.target.value)\r\n    };\r\n    const onSumbitHandler = () => {\r\n        dispatch(login(email, password))\r\n    };\r\n\r\n    const {isAuth} = useSelector((store: storeType) => store.login);\r\n\r\n    if(isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'wrapper'}>\r\n            <h2>Log in with your account</h2>\r\n            <Input placeholder=\"Email\" value={email} onChange={onEmailChange}/>\r\n            <Input placeholder=\"Password\" type=\"password\" value={password} onChange={onPassChange}/>\r\n            <Button description=\"Submit\" onClick={onSumbitHandler}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Login;","import React from 'react';\r\nimport styles from \"./Link.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nfunction Link(props: any) {\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.containerForLink}>\r\n                <div className={styles.animation}/>\r\n                <div className={styles.link}>\r\n                    <NavLink className={styles.linkDecor} to={props.link}>{props.name}</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Link;","import React from \"react\";\r\nimport styles from './Header.module.css'\r\nimport Link from \"./Link\";\r\n\r\nconst Header: React.FC = (props: any) => {\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.container}>\r\n                <div className={styles.nameOfPages}>\r\n                    <Link link=\"./login\" name=\"Login\"/>\r\n                </div>\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.containerForOther}>\r\n                    Test task for the company OziTag.\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport Profile from \"../../components/01_Profile/Profile\";\r\nimport Login from \"../../components/02_Login/Login\";\r\nimport Header from \"../../components/header/Header\";\r\n\r\n\r\n\r\ntype PageType = {\r\n    id: number;\r\n    title: string;\r\n    path?: string;\r\n    exact?: boolean;\r\n    component: any;\r\n};\r\n\r\nconst pages: Array<PageType> = [\r\n    {id: 0, title: 'profile', path: '/profile', component: () => <Profile/>},\r\n    {id: 1, title: 'login', path: '/login', component: () => <Login/>},\r\n    {id: 2, title: 'header', path: '/', component: () => <Header/>},\r\n];\r\n\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            {pages.map(p => (\r\n                <Route\r\n                    key={p.id}\r\n                    path={p.path}\r\n                    exact={p.exact}\r\n                    render={p.component}\r\n                />\r\n            ))}\r\n        </Switch>\r\n    )\r\n};\r\n\r\nexport default Routes;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport LoginReducer from \"./LoginReducer\"\r\n\r\n\r\nconst reducers = combineReducers( {\r\n    login: LoginReducer\r\n});\r\n\r\nexport const store = createStore (reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type storeType = ReturnType<typeof reducers>","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport Routes from \"./routes/Routes\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"../bll/store\";\n\nconst App = () => {\n\n  return (\n      <HashRouter>\n        <Provider store={store}>\n          <div className=\"App\">\n            <Routes/>\n          </div>\n        </Provider>\n      </HashRouter>\n  );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}